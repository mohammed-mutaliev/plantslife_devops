plugins {
	id 'org.springframework.boot' version '2.4.1'
	id 'io.spring.dependency-management' version '1.0.10.RELEASE'
	id 'java'
	id 'pl.allegro.tech.build.axion-release' version '1.12.0'
	id 'com.palantir.docker' version '0.25.0'
    id 'com.palantir.docker-run' version '0.25.0'
	id 'jp.classmethod.aws.cloudformation' version '0.41'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '8'

repositories {
	mavenCentral()
	jcenter()
}
//sdfsdfsd

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.security:spring-security-test'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'io.jsonwebtoken:jjwt:0.9.1'
	implementation 'com.googlecode.json-simple:json-simple:1.1'
	implementation 'com.fasterxml.jackson.module:jackson-module-parameter-names'
	implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jdk8'
	implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
	implementation 'org.springframework.boot:spring-boot-starter-websocket'
	implementation 'org.springframework.boot:spring-boot-starter-tomcat'
	
	implementation group: 'com.h2database', name: 'h2', version: '1.4.200'
	
	runtimeOnly 'mysql:mysql-connector-java'
	
	
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

test {
	useJUnitPlatform()
}

project.version = scmVersion.version

String dockerHubUsernameProperty = findProperty('dockerHubUsername') ?: 'mutaliev'
String imageName = "${dockerHubUsernameProperty}/plantslife_devops:$version"

docker {
    name imageName
    files "build/libs/${bootJar.archiveFileName.get()}"
    buildArgs([JAR_FILE: bootJar.archiveFileName.get()])
}

dockerRun {
    name project.name
    image imageName
    ports '8080:8080'
    clean true
}

import com.amazonaws.services.cloudformation.model.Capability

aws {
    region = findProperty('region') ?: 'us-east-2'
}

cloudFormation {
    stackName "plantslife-devops-stack"
    stackParams([
            SubnetID: findProperty('subnetId') ?: 'subnet-48eaf232',
            ServiceName: project.name,
            ServiceVersion: project.version,
            DockerHubUsername: dockerHubUsernameProperty
    ])
    templateFile project.file("ecs.yml")
}